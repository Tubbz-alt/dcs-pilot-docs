---
title: API reference
weight: 16
last_reviewed_on: 2020-02-26
review_in: 3 weeks
---

# API reference

The Document Checking Service (DCS) API is based on [REST principles][REST]. It returns data in [JSON format][JSON], and uses standard [HTTP status response codes][HTTP-Status-Code].

This section describes the calls you can make to the DCS API, along with example requests and possible responses.

Using the DCS API you can:

* [check passport validity][check-passport]
* [see the operational status of the DCS][check-status]

## Check passport validity

You can use the DCS API to check if a passport is valid.

### Request

`POST: https://<DCS-URI>/checks/passport`

The `<DCS-URI>` will be supplied at a later date.

The HTTP header must contain `Content-Type: application/jose`.

For example, below is the structure of the JSON object in a request body without the [signature and encryption wrapper][wrapper]. All fields in the JSON object are mandatory:

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "550e8400-e29b-41d4-a716-446655440003",
  "timestamp": "1997-07-16T19:20:30.45+01:00",
  "passportNumber": "123456789",
  "surname": "Smith",
  "forenames": [
    "Bob",
    "Dave"
  ],
  "dateOfBirth": "1950-02-13",
  "expiryDate": "2020-01-01"
}
```

You can check that the structure of your JSON object is correct by using [JSON Schema][json-schema].  Choose a [validator][json-schema-validators] and run it against the [passport check payload json schema][passport-check-request-payload-schema] provided.

#### correlationId
String containing an [RFC 4122] compliant Universally Unique Identifier (UUID) which ties together multiple requests in the same session.

#### requestId
String containing an [RFC 4122] compliant UUID which identifies a single request within a session.

#### timestamp
String in ISO 8601 format which identifies when the request took place.

#### passportNumber
The number of the passport being checked, which is an integer between 1 and 899999999.

#### surname
String of maximum 30 characters containing the surname as on the passport. The surname must only contain the characters a-z, A-Z, space, hyphen, full stop and apostrophe.

#### forenames
List of strings containing the forenames on the passport. The concatenated strings, including spaces between forenames, must be maximum 30 characters. The forenames must only contain the characters a-z, A-Z, space, hyphen, full stop and apostrophe.

#### dateOfBirth
Birth date as on the passport in YYYY-MM-DD format.

#### expiryDate
The passport expiration date in YYYY-MM-DD format.

#### correlationId
String containing an [RFC 4122] compliant UUID which ties together multiple requests in the same session.

#### requestId
String containing an [RFC 4122] compliant UUID which identifies a single request within a session. This is the request ID from the original request.

#### error
Boolean indicating if there was an error when checking the passport data.

#### valid
Boolean indicating if the passport is valid or not. This field is not included if there is an error.

#### errorMessage
A list of strings which describes the error. This field is present if there was an error processing the request.

## Check the DCS status

You can check the status of the DCS by making a HTTP GET request to the service endpoint.

You may use this endpoint to build appropriate levels of reliability into your service.

### Request

`GET: https://<DCS-URI>/checks/passport`

The `<DCS-URI>` will be supplied at a later date.

The request body for a DCS status check is empty and therefore does not require the [signature and encryption wrapper][wrapper].

#### available
Boolean field indicating if the DCS is available and serving requests.

#### message
A string explaining why the DCS is unavailable. For example, if there is an ongoing planned outage, the field will contain detail about the duration of the outage.

#### scheduledOutages
A list of upcoming scheduled outages. The list is empty if there are no outages.

#### scheduledOutages.start
String in ISO 8601 format indicating when an outage is scheduled to start.

#### scheduledOutages.end
String in ISO 8601 format indicating when an outage is scheduled to end.

#### scheduledOutages.message
String indicating the reason for the scheduled outage.

## Rate limits

DCS handles up to 50 requests in total every 10 seconds.

This rate limit is divided fairly between the organisations connected to DCS for the pilot.

DCS returns a:

+ 503 (Service unavailable) HTTP status code if, at the time you submit a request, the combined total traffic from all pilot organisations is over the rate limit
+ 429 (Too many requests) HTTP status code if you have gone over your individual share of the limit

<%= partial "partials/links" %>
