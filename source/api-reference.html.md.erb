---
title: API reference
weight: 6
---

# API reference

The DCS API is based on REST principles. It returns data in JSON format, and uses standard HTTP status response codes.

This section describes the calls you can make to the DCS API, along with example requests and possible responses.

Using the DCS API you can:

* [see the operational status of the DCS][check-status]
* [check passport validity][check-passport]

## Check the DCS status

You can check the status of the Document Checking Service (DCS) by making a HTTP GET request to the service endpoint.

We recommend you use this endpoint to build appropriate levels of reliability into your service.

### Request

`GET: https://<DCS-URI>/checks/passport`

The `<DCS-URI>` will be supplied at a later date.

The HTTP header must contain `Content-Type: application/jose`.

The request body for a DCS status check is empty and therefore does not require the [signature and encryption wrapper][wrapper].

### Response

When DCS is unavailable, the `message` field will contain one of the following:

* `Limit exceeded` - You have exceeded your allocated number of API calls
* `Planned outage in progress finishing <TIMESTAMP>` - Either the DCS or HM Passport Office (HMPO) are in a period of scheduled downtime, ending at `<TIMESTAMP>`
* `Unplanned outage` - Either HMPO or the DCS are experiencing a period of unscheduled downtime

For example, if you made the request during an outage period the JSON object in the response body without the [signature and encryption wrapper][cryptography] will be similar to:

```json
{
  "available": false,
  "message": "Planned outage in progress finishing 2019-09-12T00:00:00.000Z",
  "scheduledOutages":
    [
      {
      	"start":"2019-09-05T00:00:00.000Z",
      	"end":"2019-09-12T00:00:00.000Z",
      	"message":"HMPO is doing some maintenance work."
      }
    ]
}
```

#### available
Boolean. Whether the DCS is available and serving requests.

#### message
String. Information about the current status, for example whether there is currently a planned outage.

#### scheduledOutages
A list of upcoming scheduled outages, empty if none.

#### scheduledOutages.start
String, ISO 8601 format. When an outage is scheduled to start.

#### scheduledOutages.end
String, ISO 8601 format. When an outage is scheduled to end.

#### scheduledOutages.message
String. The reason for the scheduled outage.




## Check passport validity

You can use the DCS API to check if a passport is valid.

### Request

`POST: https://<DCS-URI>/checks/passport`

The `<DCS-URI>` will be supplied at a later date.

The HTTP header must contain `Content-Type: application/jose`.

For example, this is the structure of the JSON object in a request body without the [signature and encryption wrapper][cryptography]:

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "550e8400-e29b-41d4-a716-446655440003",
  "timestamp": "1997-07-16T19:20:30.45+01:00",
  "clientId": "clientName",
  "passportNumber": "123456789",
  "surname": "Smith",
  "forenames": [
    "Bob",
    "Dave"
  ],
  "dateOfBirth": "1950-02-13",
  "expiryDate": "2020-01-01"
}
```

Surname and forename values must only be comprised of the characters a-z, A-Z, space, hyphen, full stop and apostrophe.

All Universally Unique Identifier (UUID) fields must be in RFC 4112 format.

#### correlationId
String, UUID. Ties together multiple requests in the same session.

#### requestId            
String, UUID. Identifies a single request within a session.

#### timestamp            
String, ISO 8601 format. Identifies when the request took place.

#### clientId             
String. Unique identifier issued by the DCS team.

#### passportNumber       
Integer, between 1 and 899999999. The designated number of the passport being checked.

#### surname              
String, maximum length 30. The surname as on the passport.

#### forenames            
String, maximum length 30 when concatenated with a space delimiter. List of forenames as on the passport.

#### dateOfBirth          
Date in the format YYYY-MM-DD. Birth date as on the passport.

#### expiryDate           
Date in the format YYYY-MM-DD. The expiration date of the passport.                                  

### Response

A successful request is one that completes without error, regardless of whether the passport is valid or not.

If the request was successful, the unwrapped response object will look like:

#### Successful response for a valid passport
```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "af47ddc1-faa9-42fe-be1f-8131df114713",
  "error": false,
  "valid": true
}
```

#### Successful response for an invalid passport

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "af47ddc1-faa9-42fe-be1f-8131df114713",
  "error": false,
  "valid": false
}
```

#### Error response

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "af47ddc1-faa9-42fe-be1f-8131df114713",
  "error": true,
  "errorMessage": [
    "Unplanned outage"
  ]
}
```

#### correlationId
String, RFC 4122 compliant UUID. The correlation ID from the original request

#### requestId
String, RFC 4122 compliant UUID. The request ID from the original request.

#### error
Boolean. Indicates whether there was an error when checking the passport data.

#### valid
Boolean. Whether the passport is valid or not. This field is not included if there is an error.

#### errorMessage
List of Strings. A description of the error. This field is non-empty only if there was an upstream error from HMPO.


<%= partial "partials/links" %>
