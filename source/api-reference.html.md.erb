---
title: API reference
weight: 6
last_reviewed_on: 2020-04-14
review_in: 3 weeks
---

# API reference

The Document Checking Service (DCS) API is based on [REST principles][REST]. It returns data in [JSON format][JSON], and uses standard [HTTP status response codes][status-response-codes].

This section describes the calls you can make to the DCS API, along with example requests and possible responses.

Using the DCS API you can:

* [see the operational status of the DCS][check-status]
* [check passport validity][check-passport]

## Check the DCS status

You can check the status of the DCS by making a HTTP GET request to the service endpoint.

We recommend you use this endpoint to build appropriate levels of reliability into your service.

### Request

`GET: https://<DCS-URI>/checks/passport`

The `<DCS-URI>` will be supplied at a later date.

The HTTP header must contain `Content-Type: application/jose`.

The request body for a DCS status check is empty and therefore does not require the [signature and encryption wrapper](/sign-and-encrypt-a-DCS-payload/#sign-and-encrypt-a-dcs-payload).

### Response

If the DCS is available, the JSON response body will be similar to:

```json
{
  "available":true,
  "scheduledOutages":[]
}
```

If the DCS is unavailable, the `message` field in the response describes the cause. The cause for unavailability can be:

* `Limit exceeded` - you have exceeded your allocated number of API calls
* `Planned outage in progress finishing <TIMESTAMP>` - the DCS or HM Passport Office (HMPO) are in a period of scheduled downtime, ending at `<TIMESTAMP>`
* `Unplanned outage` - the DCS or HMPO are experiencing a period of unscheduled downtime

For example, during a planned outage, the response is similar to:

```json
{
  "available": false,
  "message": "Planned outage in progress finishing 2019-09-12T00:00:00.000Z",
  "scheduledOutages":
    [
      {
      	"start":"2019-09-05T00:00:00.000Z",
      	"end":"2019-09-12T00:00:00.000Z",
      	"message":"Maintenance work is underway."
      }
    ]
}
```

#### available
Boolean field indicating if the DCS is available and serving requests.

#### message
A string explaining why the DCS is unavailable. For example, if there is an ongoing planned outage, the field will contain detail about the duration of the outage.

#### scheduledOutages
A list of upcoming scheduled outages. The list is empty if there are no outages.

#### scheduledOutages.start
String in ISO 8601 format indicating when an outage is scheduled to start.

#### scheduledOutages.end
String in ISO 8601 format indicating when an outage is scheduled to end.

#### scheduledOutages.message
String indicating the reason for the scheduled outage.

## Check passport validity

You can use the DCS API to check if a passport is valid.

### Request

`POST: https://<DCS-URI>/checks/passport`

The `<DCS-URI>` will be supplied at a later date.

The HTTP header must contain `Content-Type: application/jose`.

For example, below is the structure of the JSON object in a request body without the [signature and encryption wrapper](/sign-and-encrypt-a-DCS-payload/#sign-and-encrypt-a-dcs-payload). All fields in the JSON object are mandatory:

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "550e8400-e29b-41d4-a716-446655440003",
  "timestamp": "1997-07-16T19:20:30.45+01:00",
  "passportNumber": "123456789",
  "surname": "Smith",
  "forenames": [
    "Bob",
    "Dave"
  ],
  "dateOfBirth": "1950-02-13",
  "expiryDate": "2020-01-01"
}
```

#### correlationId
String containing an [RFC 4122] compliant Universally Unique Identifier (UUID) which ties together multiple requests in the same session.

#### requestId
String containing an [RFC 4122] compliant UUID which identifies a single request within a session.

#### timestamp
String in ISO 8601 format which identifies when the request took place.

#### passportNumber
The number of the passport being checked, which is an integer between 1 and 899999999.

#### surname
String of maximum 30 characters containing the surname as on the passport. The surname must only contain the characters a-z, A-Z, space, hyphen, full stop and apostrophe.

#### forenames
List of strings containing the forenames on the passport. The concatenated strings, including spaces between forenames, must be maximum 30 characters. The forenames must only contain the characters a-z, A-Z, space, hyphen, full stop and apostrophe.

#### dateOfBirth
Birth date as on the passport in YYYY-MM-DD format.

#### expiryDate
The passport expiration date in YYYY-MM-DD format.

### Response

A successful request is one that completes without error, regardless of whether the passport is valid or not.

The DCS returns a:

* `200` [HTTP response code][status-response-codes] for successful requests
* `503` [HTTP response code][status-response-codes] if HMPO is having a planned outage

Example response body for a valid passport:

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "af47ddc1-faa9-42fe-be1f-8131df114713",
  "error": false,
  "valid": true
}
```

Example response body for an invalid passport:

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "af47ddc1-faa9-42fe-be1f-8131df114713",
  "error": false,
  "valid": false
}
```

Example response body for a successful response containing an error:

```json
{
  "correlationId": "550e8400-e29b-41d4-a716-446655440000",
  "requestId": "af47ddc1-faa9-42fe-be1f-8131df114713",
  "error": true,
  "errorMessage": [
    "Unplanned outage"
  ]
}
```

Example plain text response body for a planned outage:

```
Service passport check: Planned outage in progress finishing at 2019-10-24T03:00:00.000+01:00
```

#### correlationId
String containing an [RFC 4122] compliant UUID which ties together multiple requests in the same session.

#### requestId
String containing an [RFC 4122] compliant UUID which identifies a single request within a session. This is the request ID from the original request.

#### error
Boolean indicating if there was an error when checking the passport data.

#### valid
Boolean indicating if the passport is valid or not. This field is not included if there is an error.

#### errorMessage
A list of strings which describes the error. This field is present if there was an error processing the request.

## Rate limits

DCS handles up to 50 requests in total every 10 seconds.

This rate limit is divided fairly between the organisations connected to DCS for the pilot.

DCS returns a:

+ 503 (Service unavailable) HTTP status code if, at the time you submit a request, the combined total traffic from all pilot organisations is over the rate limit
+ 429 (Too many requests) HTTP status code if you have gone over your individual share of the limit

In both cases, the [`Retry-After`][Retry-After] HTTP header specifies how many seconds you should wait before retrying.

## Quotas

Each organisation connected to the DCS for the pilot will have a quota of DCS checks. This is a fixed limit on the number of production DCS checks that the organisation can make during the pilot.

The DCS returns a 403 (Forbidden) HTTP status code if you have used up your quota. You won't be able to make any more DCS checks after this point.

You can see your quota usage in HTTP headers in passport validity responses from the DCS.

* `DCS-Quota-Limit` is the total number of checks you will be able to make as part of the DCS pilot
* `DCS-Quota-Remaining` is the number of checks you have remaining

These headers will be present in responses with 200 and 403 HTTP status codes. The DCS may also add these headers to other responses.

<%= partial "partials/links" %>
